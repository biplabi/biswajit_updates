package com.gravity.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.gravity.model.Student;

@RestController
@RequestMapping("/student")
public class StudentMgmtRestController 
{
	private List<Student> studentList = new ArrayList<>();
	@GetMapping("/check")
	public String chech()
	{
		return "Good to go!";
	}
	
	@GetMapping("/show")
	public List<Student> getStudentList()
	{
		return studentList;
	}
	
	@PostMapping("/add")
	public String addStudent(@RequestBody Student student)
	{
		studentList.add(student);
		return "Student added successfully!";
	}
	
	@GetMapping("/{id}")
	public Student getStudentById(@PathVariable("id") int id)
	{
		return this.studentList.stream().filter(s -> s.getId() == id).findFirst().orElse(null);
	}
	
	@PutMapping("/{id}")
	public String updateStudent(@PathVariable("id") int id, @RequestBody Student student)
	{
		for(Student st : studentList)
		{
			if(st.getId() == id)
			{
				st.setName(student.getName());
				st.setCourse(student.getCourse());
			}
		}
		
		return "Student updated successfully!";
	}
	
	@DeleteMapping("/{id}")
	public String deleteStudent(@PathVariable("id") int id)
	{
		Student deleteStudent = null;
		for(Student st : studentList)
		{
			if(st.getId() == id)deleteStudent = st;
		}
		this.studentList.remove(deleteStudent);
		
		return id + " id student deleted successfully!";
	}
	
	@GetMapping("/greet")
	public String getMessage(@RequestParam("name") String name)
	{
		return "Hi " + name + " how are you doing!";
	}
	
	@GetMapping("/hello")
	public ResponseEntity<String> sayHello()
	{
		return new ResponseEntity<>("Hello, world!", HttpStatus.OK);
	}
	
	@GetMapping("/find")
	public ResponseEntity<String> find()
	{
		boolean found = false;
		
		if(!found)
		{
			return new ResponseEntity<>("Not found!", HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<>("Data found!", HttpStatus.FOUND);
	}
}
